<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	       http://www.springframework.org/schema/aop   
		   http://www.springframework.org/schema/aop/spring-aop-4.0.xsd                        
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<!-- Enable the @Secured annotation to secure service layer methods -->
	<global-method-security secured-annotations="enabled" />

	<http auto-config="true">

		<!-- ====================================================== -->
		<!-- If we have our own LoginPage. So we must -->
		<!-- tell Spring the name and the place. -->
		<!-- In our case we take the same page -->
		<!-- for a error message by a failure. -->
		<!-- Further the page after a successfully login. -->
		<!-- ====================================================== -->
		<form-login login-page="/login.zul" authentication-failure-url="/login.zul?login_error=1"
			default-target-url="/index.zul" />

		<!-- ====================================================== -->
		<!-- Tell Spring where it goes after logout. -->
		<!-- logout-url is a action url. -->
		<!-- ====================================================== -->
		<logout logout-url="/j_spring_logout" logout-success-url="/" />

		<!-- ====================================================== -->
		<!-- Define the pages that are to be intercepted -->
		<!-- It is parsed from top to bottom. Means that -->
		<!-- the most specific pattern is standing on TOP -->
		<!-- and the CATCH ALL is on BOTTOM! -->
		<!-- ====================================================== -->
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_REMEMBERED" />

		<!-- ====================================================== -->
		<!-- The root page is accessible by everyone but -->
		<!-- internally spring makes a login as authenticated anonymously -->
		<!-- ====================================================== -->
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />

		<!-- ====================================================== -->
		<!-- 3 user session !! -->
		<!-- ====================================================== -->
		<session-management>
			<concurrency-control max-sessions="3" />
		</session-management>

		<!--JCaptcha Filtering-->
		<!-- 
		<custom-filter ref="captchaCaptureFilter" before="FORM_LOGIN_FILTER"/>
		 -->

	</http>

	<!-- ====================================================== -->
	<!-- We define the kind of authentification with a -->
	<!-- so called authentication-provider -->
	<!-- We use the DAO authenticationProvider. -->
	<!-- We coded out a custom UserDetailServiceImpl. -->
	<!-- So we have our users stored in a DB we use -->
	<!-- our own user-service class and point to her. -->
	<!-- ====================================================== -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailsService">
			<!-- The password encoder -->
			<!-- <password-encoder ref="passwordEncoder">-->
				<!-- the salt is implemented in the passwordEncoder <salt-source user-property="token"/> -->
			<!-- </password-encoder>-->
		</authentication-provider>
	</authentication-manager>

	<!-- ====================================================== -->
	<!-- The Implementation of the Interface -->
	<!-- UserDetailService for the logged in -->
	<!-- user and his rights -->
	<!-- ====================================================== -->
	
	
	<beans:bean id="myUserDetailsService" class="reporting.login.myUserDetailsService">
	</beans:bean>
	
	<!-- ====================================================== -->
	<!--          For capturing CAPTCHA fields                  -->
	<!-- ====================================================== -->
	<!-- 
	<beans:bean id="captchaCaptureFilter" class="de.oxitec.zkboost.web.security.CaptchaCaptureFilter" />
	 -->

	<!-- ====================================================== -->
	<!-- The Password Encoder who works in the -->
	<!-- one-time-password mechanism. -->
	<!-- ====================================================== -->
	<beans:bean id="passwordEncoder" class="reporting.login.OXPasswordEncoderImpl">
	</beans:bean>
	<!-- ====================================================== -->
	<!-- This ASPECT calls automatically the method -->
	<!-- 'logTheLogin' which is for writing a log for -->
	<!-- all successfully and failed logins, if a -->
	<!-- method is called that handles the Authentication. -->
	<!-- ====================================================== -->
	
	<!-- 
	<beans:bean id="oxLoginLoggingService" class="de.oxitec.zkboost.web.module.admin.security.login.OXLoginLoggingServiceImpl"
		scope="session">
		<beans:property name="oxLoginLogService" ref="oxLoginLogService" />
	</beans:bean>

	<beans:bean id="oxLoginLoggingAuthService" class="de.oxitec.zkboost.web.module.admin.security.login.OXLoginLoggingAuthService"
		scope="session">
		<beans:property name="oxLoginLoggingService" ref="oxLoginLoggingService" />
	</beans:bean>

	<aop:config>
		<aop:aspect id="LoginLoggingAspect" ref="oxLoginLoggingAuthService">
			<aop:pointcut id="authPointcut"
				expression="execution(public org.springframework.security.core.Authentication org.springframework.security.authentication.AuthenticationProvider.authenticate(org.springframework.security.core.Authentication))" />
			<aop:around pointcut-ref="authPointcut" method="logTheLogin" />
		</aop:aspect>
	</aop:config>
	 -->

</beans:beans>

